<?php

declare(strict_types=1);

/**
 * DisMoi OpenAPI.
 *
 * OpenAPI documentation and _sandbox_ for **DisMoi** (_Tell Me_ in french), a FLOSS web annotations project to turn the tide of the opinion wars back in favor of the internauts.  - [Official Website](https://www.dismoi.io/) - [Source Code](https://github.com/dis-moi) - [Report Issues](https://github.com/dis-moi/backend/issues) (_please!_)
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 *
 * This class is auto generated, do not edit manually.
 */

namespace DisMoi\Client\Test;

use DisMoi\Client\Api\AuthenticationApi;
use DisMoi\Client\Api\NoticeApi;
use DisMoi\Client\Configuration;
use DisMoi\Client\Model\Credentials;
use DisMoi\Client\Model\MatchingContextJsonldCreate;
use DisMoi\Client\Model\NoticeJsonldCreate;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use PHPUnit\Framework\TestCase;

class DevServerTest extends TestCase
{
    /**
     * @var Client
     */
    private $client;

    /**
     * @var Configuration
     */
    private $configuration;

    /**
     * Setup before running any test case.
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case.
     */
    protected function setUp(): void
    {
        try {
            $this->configuration = Configuration::getDefaultConfiguration()->setHost('http://localhost:8088');
            $this->client = new Client();
            $authenticationApi = new AuthenticationApi(
                $this->client,
                $this->configuration
            );
            $credentials = new Credentials([
                'username' => 'lmem',
                'password' => 'LM3M!P4SSW0RD',
            ]);
            ['token' => $token] = $authenticationApi->postCredentialsItem($credentials);
            echo $token, \PHP_EOL;

            $this->configuration->setApiKey('Authorization', $token);
        } catch (\Exception $e) {
            echo \PHP_EOL;
            echo $e->getMessage(), \PHP_EOL;
            echo $e->getTraceAsString();
        }
    }

    /**
     * @group dev
     */
    public function testPostJsonLdNotice(): void
    {
        try {
            $noticeApi = new NoticeApi($this->client, $this->configuration);
            $noticeCreationPayload = new NoticeJsonldCreate([
                'message' => 'Bonjour',
                'contributor' => '/v4/contributors/1',
                'visibility' => 'public',
                'matchingContexts' => [
                    new MatchingContextJsonldCreate([
                        'exampleUrl' => 'http://tests.menant-benjamin.fr/',
                        'urlRegex' => '(.*)',
                        'excludeUrlRegex' => '',
                        'description' => 'a regexp',
                        'querySelector' => '',
                        'xpath' => '',
                    ]),
                ],
            ]);
            $response = $noticeApi->postNoticeCollection($noticeCreationPayload);
            var_dump($response);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            $responseBodyAsString = $response->getBody()->getContents();
            var_dump(json_decode($responseBodyAsString, true)['hydra:description']);
        } catch (\Exception $e) {
            echo \PHP_EOL;
            echo $e->getMessage(), \PHP_EOL;
            echo $e->getTraceAsString();
        }
    }

    /**
     * Clean up after running each test case.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases.
     */
    public static function tearDownAfterClass(): void
    {
    }
}
