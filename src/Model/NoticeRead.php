<?php

declare(strict_types=1);

/**
 * DisMoi OpenAPI.
 *
 * OpenAPI documentation and _sandbox_ for **DisMoi** (_Tell Me_ in french), a FLOSS web annotations project to turn the tide of the opinion wars back in favor of the internauts.  - [Official Website](https://www.dismoi.io/) - [Source Code](https://github.com/dis-moi) - [Report Issues](https://github.com/dis-moi/backend/issues) (_please!_)
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 *
 * This class is auto generated, do not edit manually.
 */

namespace DisMoi\Client\Model;

use ArrayAccess;
use DisMoi\Client\ObjectSerializer;

/**
 * NoticeRead Class Doc Comment.
 *
 * @category Class
 * @description A Notice holds a message written/contributed by a Contributor about a web page or a set of web pages selected by the matching contexts.
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NoticeRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Notice-read';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id' => 'int',
        'visibility' => 'string',
        'matchingContexts' => '\DisMoi\Client\Model\MatchingContextRead[]',
        'contributor' => 'string',
        'message' => 'string',
        'badgedCount' => 'int',
        'displayedCount' => 'int',
        'unfoldedCount' => 'int',
        'clickedCount' => 'int',
        'likedCount' => 'int',
        'dislikedCount' => 'int',
        'dismissedCount' => 'int',
        'created' => '\DateTime',
        'expires' => '\DateTime',
        'modified' => '\DateTime',
        'strippedMessage' => 'string',
        'likes' => 'int',
        'dislikes' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id' => null, 'visibility' => null, 'matchingContexts' => null, 'contributor' => 'iri-reference', 'message' => null, 'badgedCount' => null, 'displayedCount' => null, 'unfoldedCount' => null, 'clickedCount' => null, 'likedCount' => null, 'dislikedCount' => null, 'dismissedCount' => null, 'created' => 'date-time', 'expires' => 'date-time', 'modified' => 'date-time', 'strippedMessage' => null, 'likes' => null, 'dislikes' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'visibility' => 'visibility',
        'matchingContexts' => 'matchingContexts',
        'contributor' => 'contributor',
        'message' => 'message',
        'badgedCount' => 'badgedCount',
        'displayedCount' => 'displayedCount',
        'unfoldedCount' => 'unfoldedCount',
        'clickedCount' => 'clickedCount',
        'likedCount' => 'likedCount',
        'dislikedCount' => 'dislikedCount',
        'dismissedCount' => 'dismissedCount',
        'created' => 'created',
        'expires' => 'expires',
        'modified' => 'modified',
        'strippedMessage' => 'strippedMessage',
        'likes' => 'likes',
        'dislikes' => 'dislikes',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'visibility' => 'setVisibility',
        'matchingContexts' => 'setMatchingContexts',
        'contributor' => 'setContributor',
        'message' => 'setMessage',
        'badgedCount' => 'setBadgedCount',
        'displayedCount' => 'setDisplayedCount',
        'unfoldedCount' => 'setUnfoldedCount',
        'clickedCount' => 'setClickedCount',
        'likedCount' => 'setLikedCount',
        'dislikedCount' => 'setDislikedCount',
        'dismissedCount' => 'setDismissedCount',
        'created' => 'setCreated',
        'expires' => 'setExpires',
        'modified' => 'setModified',
        'strippedMessage' => 'setStrippedMessage',
        'likes' => 'setLikes',
        'dislikes' => 'setDislikes',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'visibility' => 'getVisibility',
        'matchingContexts' => 'getMatchingContexts',
        'contributor' => 'getContributor',
        'message' => 'getMessage',
        'badgedCount' => 'getBadgedCount',
        'displayedCount' => 'getDisplayedCount',
        'unfoldedCount' => 'getUnfoldedCount',
        'clickedCount' => 'getClickedCount',
        'likedCount' => 'getLikedCount',
        'dislikedCount' => 'getDislikedCount',
        'dismissedCount' => 'getDismissedCount',
        'created' => 'getCreated',
        'expires' => 'getExpires',
        'modified' => 'getModified',
        'strippedMessage' => 'getStrippedMessage',
        'likes' => 'getLikes',
        'dislikes' => 'getDislikes',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data[self::$attributeMap['id']] ?? null;
        $this->container['visibility'] = $data[self::$attributeMap['visibility']] ?? 'private';
        $this->container['matchingContexts'] = $data[self::$attributeMap['matchingContexts']] ?? null;
        $this->container['contributor'] = $data[self::$attributeMap['contributor']] ?? null;
        $this->container['message'] = $data[self::$attributeMap['message']] ?? null;
        $this->container['badgedCount'] = $data[self::$attributeMap['badgedCount']] ?? null;
        $this->container['displayedCount'] = $data[self::$attributeMap['displayedCount']] ?? null;
        $this->container['unfoldedCount'] = $data[self::$attributeMap['unfoldedCount']] ?? null;
        $this->container['clickedCount'] = $data[self::$attributeMap['clickedCount']] ?? null;
        $this->container['likedCount'] = $data[self::$attributeMap['likedCount']] ?? null;
        $this->container['dislikedCount'] = $data[self::$attributeMap['dislikedCount']] ?? null;
        $this->container['dismissedCount'] = $data[self::$attributeMap['dismissedCount']] ?? null;
        $this->container['created'] = $data[self::$attributeMap['created']] ?? null;
        $this->container['expires'] = $data[self::$attributeMap['expires']] ?? null;
        $this->container['modified'] = $data[self::$attributeMap['modified']] ?? null;
        $this->container['strippedMessage'] = $data[self::$attributeMap['strippedMessage']] ?? null;
        $this->container['likes'] = $data[self::$attributeMap['likes']] ?? null;
        $this->container['dislikes'] = $data[self::$attributeMap['dislikes']] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === \count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param int|null $id a unique, incremental, numerical identifier for the Notice
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets visibility.
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility.
     *
     * @param string|null $visibility The visibility of the Notice.  See `NoticeVisibility` for an enumeration of the allowed values:   - \"public\": anyone may view this Notice   - \"private\": Notice is only visible to Contributor   - \"archived\": A deleted notice because it wasn't relevant anymore   - \"draft\": Notice is only visible to Contributor, pending publication   - \"question\": A question asked by a someone on a webpage.  A question is not publicly visible.
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets matchingContexts.
     *
     * @return \DisMoi\Client\Model\MatchingContextRead[]|null
     */
    public function getMatchingContexts()
    {
        return $this->container['matchingContexts'];
    }

    /**
     * Sets matchingContexts.
     *
     * @param \DisMoi\Client\Model\MatchingContextRead[]|null $matchingContexts matchingContexts
     *
     * @return self
     */
    public function setMatchingContexts($matchingContexts)
    {
        $this->container['matchingContexts'] = $matchingContexts;

        return $this;
    }

    /**
     * Gets contributor.
     *
     * @return string|null
     */
    public function getContributor()
    {
        return $this->container['contributor'];
    }

    /**
     * Sets contributor.
     *
     * @param string|null $contributor the Contributor who submitted the Notice
     *
     * @return self
     */
    public function setContributor($contributor)
    {
        $this->container['contributor'] = $contributor;

        return $this;
    }

    /**
     * Gets message.
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message.
     *
     * @param string|null $message The raw message attached to the Notice, as given by the Contributor.  It is unsafe to read from it, prefer reading from `strippedMessage`.
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets badgedCount.
     *
     * @return int|null
     */
    public function getBadgedCount()
    {
        return $this->container['badgedCount'];
    }

    /**
     * Sets badgedCount.
     *
     * @param int|null $badgedCount badgedCount
     *
     * @return self
     */
    public function setBadgedCount($badgedCount)
    {
        $this->container['badgedCount'] = $badgedCount;

        return $this;
    }

    /**
     * Gets displayedCount.
     *
     * @return int|null
     */
    public function getDisplayedCount()
    {
        return $this->container['displayedCount'];
    }

    /**
     * Sets displayedCount.
     *
     * @param int|null $displayedCount the number of time the notice has been displayed in a list
     *
     * @return self
     */
    public function setDisplayedCount($displayedCount)
    {
        $this->container['displayedCount'] = $displayedCount;

        return $this;
    }

    /**
     * Gets unfoldedCount.
     *
     * @return int|null
     */
    public function getUnfoldedCount()
    {
        return $this->container['unfoldedCount'];
    }

    /**
     * Sets unfoldedCount.
     *
     * @param int|null $unfoldedCount the number of time the notice has been displayed in full
     *
     * @return self
     */
    public function setUnfoldedCount($unfoldedCount)
    {
        $this->container['unfoldedCount'] = $unfoldedCount;

        return $this;
    }

    /**
     * Gets clickedCount.
     *
     * @return int|null
     */
    public function getClickedCount()
    {
        return $this->container['clickedCount'];
    }

    /**
     * Sets clickedCount.
     *
     * @param int|null $clickedCount the number of time the notice has been clicked
     *
     * @return self
     */
    public function setClickedCount($clickedCount)
    {
        $this->container['clickedCount'] = $clickedCount;

        return $this;
    }

    /**
     * Gets likedCount.
     *
     * @return int|null
     */
    public function getLikedCount()
    {
        return $this->container['likedCount'];
    }

    /**
     * Sets likedCount.
     *
     * @param int|null $likedCount the number of time the notice has been liked
     *
     * @return self
     */
    public function setLikedCount($likedCount)
    {
        $this->container['likedCount'] = $likedCount;

        return $this;
    }

    /**
     * Gets dislikedCount.
     *
     * @return int|null
     */
    public function getDislikedCount()
    {
        return $this->container['dislikedCount'];
    }

    /**
     * Sets dislikedCount.
     *
     * @param int|null $dislikedCount the number of time the notice has been disliked
     *
     * @return self
     */
    public function setDislikedCount($dislikedCount)
    {
        $this->container['dislikedCount'] = $dislikedCount;

        return $this;
    }

    /**
     * Gets dismissedCount.
     *
     * @return int|null
     */
    public function getDismissedCount()
    {
        return $this->container['dismissedCount'];
    }

    /**
     * Sets dismissedCount.
     *
     * @param int|null $dismissedCount the number of time the notice has been dismissed
     *
     * @return self
     */
    public function setDismissedCount($dismissedCount)
    {
        $this->container['dismissedCount'] = $dismissedCount;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param \DateTime|null $created creation date of the notice, serialized in the ISO8601 format
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets expires.
     *
     * @return \DateTime|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires.
     *
     * @param \DateTime|null $expires expiration date of the notice, in the ISO8601 format
     *
     * @return self
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets modified.
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified.
     *
     * @param \DateTime|null $modified last modification date of the notice, serialized in the ISO8601 format
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets strippedMessage.
     *
     * @return string|null
     */
    public function getStrippedMessage()
    {
        return $this->container['strippedMessage'];
    }

    /**
     * Sets strippedMessage.
     *
     * @param string|null $strippedMessage The message attached to the Notice, ie. what the user wants to read, the main content of DisMoi, the added value, etc.  It is HTML, and is \"purified\", ie. is stripped of HTML tags not in ALLOWED_TAGS.
     *
     * @return self
     */
    public function setStrippedMessage($strippedMessage)
    {
        $this->container['strippedMessage'] = $strippedMessage;

        return $this;
    }

    /**
     * Gets likes.
     *
     * @return int|null
     */
    public function getLikes()
    {
        return $this->container['likes'];
    }

    /**
     * Sets likes.
     *
     * @param int|null $likes amount of likes the Notice has received
     *
     * @return self
     */
    public function setLikes($likes)
    {
        $this->container['likes'] = $likes;

        return $this;
    }

    /**
     * Gets dislikes.
     *
     * @return int|null
     */
    public function getDislikes()
    {
        return $this->container['dislikes'];
    }

    /**
     * Sets dislikes.
     *
     * @param int|null $dislikes amount of dislikes the Notice has received
     *
     * @return self
     */
    public function setDislikes($dislikes)
    {
        $this->container['dislikes'] = $dislikes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            \JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
