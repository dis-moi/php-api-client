<?php

declare(strict_types=1);
/**
 * DisMoi OpenAPI.
 *
 * OpenAPI documentation and _sandbox_ for **DisMoi** (_Tell Me_ in french), a FLOSS web annotations project to turn the tide of the opinion wars back in favor of the internauts.  - [Official Website](https://www.dismoi.io/) - [Source Code](https://github.com/dis-moi) - [Report Issues](https://github.com/dis-moi/backend/issues) (_please!_)
 *
 * The version of the OpenAPI document: 4.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 *
 * This class is auto generated, do not edit manually.
 */

namespace DisMoi\Client\Api;

use DisMoi\Client\ApiException;
use DisMoi\Client\Configuration;
use DisMoi\Client\HeaderSelector;
use DisMoi\Client\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

class MatchingContextApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiNoticesMatchingContextsGetSubresourceNoticeSubresource.
     *
     * Retrieves a Notice resource.
     *
     * @param string $id   Notice identifier (required)
     * @param int    $page The collection page number (optional, default to 1)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \DisMoi\Client\Model\InlineResponse200
     */
    public function apiNoticesMatchingContextsGetSubresourceNoticeSubresource($id, $page = 1)
    {
        [$response] = $this->apiNoticesMatchingContextsGetSubresourceNoticeSubresourceWithHttpInfo($id, $page);

        return $response;
    }

    /**
     * Operation apiNoticesMatchingContextsGetSubresourceNoticeSubresourceWithHttpInfo.
     *
     * Retrieves a Notice resource.
     *
     * @param string $id   Notice identifier (required)
     * @param int    $page The collection page number (optional, default to 1)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \DisMoi\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiNoticesMatchingContextsGetSubresourceNoticeSubresourceWithHttpInfo($id, $page = 1)
    {
        $request = $this->apiNoticesMatchingContextsGetSubresourceNoticeSubresourceRequest($id, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\DisMoi\Client\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DisMoi\Client\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\DisMoi\Client\Model\InlineResponse200';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DisMoi\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiNoticesMatchingContextsGetSubresourceNoticeSubresourceAsync.
     *
     * Retrieves a Notice resource.
     *
     * @param string $id   Notice identifier (required)
     * @param int    $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiNoticesMatchingContextsGetSubresourceNoticeSubresourceAsync($id, $page = 1)
    {
        return $this->apiNoticesMatchingContextsGetSubresourceNoticeSubresourceAsyncWithHttpInfo($id, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiNoticesMatchingContextsGetSubresourceNoticeSubresourceAsyncWithHttpInfo.
     *
     * Retrieves a Notice resource.
     *
     * @param string $id   Notice identifier (required)
     * @param int    $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiNoticesMatchingContextsGetSubresourceNoticeSubresourceAsyncWithHttpInfo($id, $page = 1)
    {
        $returnType = '\DisMoi\Client\Model\InlineResponse200';
        $request = $this->apiNoticesMatchingContextsGetSubresourceNoticeSubresourceRequest($id, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiNoticesMatchingContextsGetSubresourceNoticeSubresource'.
     *
     * @param string $id   Notice identifier (required)
     * @param int    $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiNoticesMatchingContextsGetSubresourceNoticeSubresourceRequest($id, $page = 1)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiNoticesMatchingContextsGetSubresourceNoticeSubresource');
        }

        $resourcePath = '/v4/notices/{id}/matching_contexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, 'form', true);
        }
        if (null !== $page) {
            $queryParams['page'] = $page;
        }

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if (null !== $apiKey) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchingContextCollection.
     *
     * Retrieves the collection of MatchingContext resources.
     *
     * @param int $page The collection page number (optional, default to 1)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \DisMoi\Client\Model\InlineResponse200
     */
    public function getMatchingContextCollection($page = 1)
    {
        [$response] = $this->getMatchingContextCollectionWithHttpInfo($page);

        return $response;
    }

    /**
     * Operation getMatchingContextCollectionWithHttpInfo.
     *
     * Retrieves the collection of MatchingContext resources.
     *
     * @param int $page The collection page number (optional, default to 1)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \DisMoi\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchingContextCollectionWithHttpInfo($page = 1)
    {
        $request = $this->getMatchingContextCollectionRequest($page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\DisMoi\Client\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DisMoi\Client\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\DisMoi\Client\Model\InlineResponse200';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DisMoi\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchingContextCollectionAsync.
     *
     * Retrieves the collection of MatchingContext resources.
     *
     * @param int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchingContextCollectionAsync($page = 1)
    {
        return $this->getMatchingContextCollectionAsyncWithHttpInfo($page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchingContextCollectionAsyncWithHttpInfo.
     *
     * Retrieves the collection of MatchingContext resources.
     *
     * @param int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchingContextCollectionAsyncWithHttpInfo($page = 1)
    {
        $returnType = '\DisMoi\Client\Model\InlineResponse200';
        $request = $this->getMatchingContextCollectionRequest($page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'getMatchingContextCollection'.
     *
     * @param int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMatchingContextCollectionRequest($page = 1)
    {
        $resourcePath = '/v4/matching_contexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, 'form', true);
        }
        if (null !== $page) {
            $queryParams['page'] = $page;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if (null !== $apiKey) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchingContextItem.
     *
     * Retrieves a MatchingContext resource.
     *
     * @param string $id Resource identifier (required)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \DisMoi\Client\Model\MatchingContextJsonldRead
     */
    public function getMatchingContextItem($id)
    {
        [$response] = $this->getMatchingContextItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation getMatchingContextItemWithHttpInfo.
     *
     * Retrieves a MatchingContext resource.
     *
     * @param string $id Resource identifier (required)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \DisMoi\Client\Model\MatchingContextJsonldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchingContextItemWithHttpInfo($id)
    {
        $request = $this->getMatchingContextItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\DisMoi\Client\Model\MatchingContextJsonldRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DisMoi\Client\Model\MatchingContextJsonldRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\DisMoi\Client\Model\MatchingContextJsonldRead';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DisMoi\Client\Model\MatchingContextJsonldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchingContextItemAsync.
     *
     * Retrieves a MatchingContext resource.
     *
     * @param string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchingContextItemAsync($id)
    {
        return $this->getMatchingContextItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchingContextItemAsyncWithHttpInfo.
     *
     * Retrieves a MatchingContext resource.
     *
     * @param string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchingContextItemAsyncWithHttpInfo($id)
    {
        $returnType = '\DisMoi\Client\Model\MatchingContextJsonldRead';
        $request = $this->getMatchingContextItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'getMatchingContextItem'.
     *
     * @param string $id Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMatchingContextItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getMatchingContextItem');
        }

        $resourcePath = '/v4/matching_contexts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if (null !== $apiKey) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMatchingContextCollection.
     *
     * Creates a MatchingContext resource.
     *
     * @param \DisMoi\Client\Model\MatchingContextJsonldCreate $matchingContextJsonldCreate The new MatchingContext resource (required)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \DisMoi\Client\Model\MatchingContextJsonldRead
     */
    public function postMatchingContextCollection($matchingContextJsonldCreate)
    {
        [$response] = $this->postMatchingContextCollectionWithHttpInfo($matchingContextJsonldCreate);

        return $response;
    }

    /**
     * Operation postMatchingContextCollectionWithHttpInfo.
     *
     * Creates a MatchingContext resource.
     *
     * @param \DisMoi\Client\Model\MatchingContextJsonldCreate $matchingContextJsonldCreate The new MatchingContext resource (required)
     *
     * @throws \DisMoi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \DisMoi\Client\Model\MatchingContextJsonldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMatchingContextCollectionWithHttpInfo($matchingContextJsonldCreate)
    {
        $request = $this->postMatchingContextCollectionRequest($matchingContextJsonldCreate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 201:
                    if ('\DisMoi\Client\Model\MatchingContextJsonldRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DisMoi\Client\Model\MatchingContextJsonldRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\DisMoi\Client\Model\MatchingContextJsonldRead';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DisMoi\Client\Model\MatchingContextJsonldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMatchingContextCollectionAsync.
     *
     * Creates a MatchingContext resource.
     *
     * @param \DisMoi\Client\Model\MatchingContextJsonldCreate $matchingContextJsonldCreate The new MatchingContext resource (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchingContextCollectionAsync($matchingContextJsonldCreate)
    {
        return $this->postMatchingContextCollectionAsyncWithHttpInfo($matchingContextJsonldCreate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMatchingContextCollectionAsyncWithHttpInfo.
     *
     * Creates a MatchingContext resource.
     *
     * @param \DisMoi\Client\Model\MatchingContextJsonldCreate $matchingContextJsonldCreate The new MatchingContext resource (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMatchingContextCollectionAsyncWithHttpInfo($matchingContextJsonldCreate)
    {
        $returnType = '\DisMoi\Client\Model\MatchingContextJsonldRead';
        $request = $this->postMatchingContextCollectionRequest($matchingContextJsonldCreate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'postMatchingContextCollection'.
     *
     * @param \DisMoi\Client\Model\MatchingContextJsonldCreate $matchingContextJsonldCreate The new MatchingContext resource (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postMatchingContextCollectionRequest($matchingContextJsonldCreate)
    {
        // verify the required parameter 'matchingContextJsonldCreate' is set
        if (null === $matchingContextJsonldCreate || (\is_array($matchingContextJsonldCreate) && 0 === \count($matchingContextJsonldCreate))) {
            throw new \InvalidArgumentException('Missing the required parameter $matchingContextJsonldCreate when calling postMatchingContextCollection');
        }

        $resourcePath = '/v4/matching_contexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/html'],
                ['application/ld+json', 'application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($matchingContextJsonldCreate)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($matchingContextJsonldCreate));
            } else {
                $httpBody = $matchingContextJsonldCreate;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if (null !== $apiKey) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if ( ! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
